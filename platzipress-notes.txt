# Proyecto Blog: presentación y configuración inicial
    
    # Instalacion del framework

        > laravel new platzipress --auth

    # Generacion de modelo con migracion / factory / controller

        > php artisan make:model Post -mfc

            - app/Post.php
            - database/migrations/2020_08_18_133349_create_posts_table.php
            - database/factories/PostFactory.php
            - app/Http/Controllers/PostController.php

    # Instalacion de Eloquent Sluggable (eloquen-sluggable-para-titulos)

        > composer require cviebrock/eloquent-sluggable

# Creación de tablas, entidades y datos de prueba

    # Configuracion de la migracion Post
    # Configuracion del factory Post
    # Configuracion del seed
        > Creacion de User.
        > Creacion de Posts

    # Creacion de migraciones / ejecucion de seeds

        > php artisan migrate:refresh --seed

# Plantillas de trabajo y entendiendo el login

    # Creacion de rutas.

    # Creacion del controller Page
        > php artisan make:controller PageController

    # Relacionamos el modelo User con Post y viceversa.

    # Creamos las vistas.

# Diseño visual con Bootstrap

    # Creacion de metodo en modelo Post para obtener el extracto.

    # Paginacion

# Vista index y botones de acción

    # Generamos el controlador en modo recurso

        > php artisan make:controller Backend/PostController --resource --model=Post

    # Generamos las rutas en modo recurso (routes/web.php)

        > Routes::resource('posts', 'PostController');

    # Creamos las vistas:

        > posts.index

# Implementación del formulario de creación

# Implementación del guardado

    # Generamos clase de validacion y retornamos en ella las validaciones.

        > php artisan make:request PostRequest

    # Guardamos la informacion del post.

    # Validamos si poseemos imagen en el request y actualizamos en caso de ser true.

    # Permitimos en el modelo la asignacion masiva para los datos.

# Creando la función de editar un post

    # Editar un registro

        Directivas blade en el formulario
            > @csrf 
            > @method('PUT')

        Metodo en el controller resource

            +--------+-----------+------------------------+------------------+------------------------------------------------------------------------+------------+
            | Domain | Method    | URI                    | Name             | Action                                                                 | Middleware |
            +--------+-----------+------------------------+------------------+------------------------------------------------------------------------+------------+
            |        | PUT|PATCH | posts/{post}           | posts.update     | App\Http\Controllers\Backend\PostController@update                     | web        |
            +--------+-----------+------------------------+------------------+------------------------------------------------------------------------+------------+

# Actualizando nuestros posts

    Actualizar registro en el controller

        > $post->update( $request->validated() );

    Eliminar imagenes en el storage
        > use Illuminate\Support\Facades\Storage;
        > Storage::disk('public')->delete( $post->image );

    Eliminando un post
        > $post->delete();

# Integrando contenido audiovisual

    Blabe
        > {{ $var }}        Imprime texto escapando los tags HTML
        > {{!! $var !!}}    Imprime text sin escapar los tags HTML

    Storage - generar un enlace entre public y storage para consumir los recursos
        > php artisan storage:link

# Usar el slug como id para acceder al post y tener URL amigables

    # Desde el modelo de eloquent

        public function getRouteKeyName()
        {
            return 'slug';
        } 













